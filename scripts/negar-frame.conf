server {
    server_name frame.leamech.com;

    # Proxy headers
    proxy_set_header Host $host;
    proxy_set_header X-Real-IP $remote_addr;
    proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
    proxy_set_header X-Forwarded-Proto $scheme;

    # Proxy timeouts
    proxy_connect_timeout 60s;
    proxy_send_timeout 60s;
    proxy_read_timeout 60s;

    # Static files location
    location /static/frames/ {
        alias /home/ahmedk/negar-frame/static/frames/;
        expires 30d;
        add_header Cache-Control "public, no-transform";
        autoindex off;
    }

    # Main application proxy
    location / {
        proxy_pass http://localhost:5003;
        proxy_redirect off;
        
        # WebSocket support (if needed)
        proxy_http_version 1.1;
        proxy_set_header Upgrade $http_upgrade;
        proxy_set_header Connection "upgrade";
    }

    # MinIO Console endpoint
    location /minio/ {
        proxy_pass http://localhost:9095/;
        
        # Authentication headers
        proxy_set_header Host $host;
        proxy_set_header X-Real-IP $remote_addr;
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        proxy_set_header X-Forwarded-Proto $scheme;
        proxy_set_header Authorization $http_authorization;
        proxy_pass_header Authorization;

        # WebSocket support
        proxy_http_version 1.1;
        proxy_set_header Upgrade $http_upgrade;
        proxy_set_header Connection "upgrade";

        # Timeouts
        proxy_connect_timeout 300;
        proxy_send_timeout 300;
        proxy_read_timeout 300;
        send_timeout 300;

        # Remove /minio/ from the URL when proxying
        rewrite ^/minio/(.*) /$1 break;

        # CORS headers
        add_header Access-Control-Allow-Origin "https://frame.leamech.com" always;
        add_header Access-Control-Allow-Methods "GET, POST, OPTIONS, PUT, DELETE" always;
        add_header Access-Control-Allow-Headers "Authorization, Content-Type, X-Amz-Date, X-Amz-User-Agent, X-Amz-Security-Token" always;
        add_header Access-Control-Allow-Credentials "true" always;

        # Handle OPTIONS method
        if ($request_method = 'OPTIONS') {
            add_header Access-Control-Allow-Origin "https://frame.leamech.com" always;
            add_header Access-Control-Allow-Methods "GET, POST, OPTIONS, PUT, DELETE" always;
            add_header Access-Control-Allow-Headers "Authorization, Content-Type, X-Amz-Date, X-Amz-User-Agent, X-Amz-Security-Token" always;
            add_header Access-Control-Allow-Credentials "true" always;
            add_header Access-Control-Max-Age 1728000;
            add_header Content-Type 'text/plain charset=UTF-8';
            add_header Content-Length 0;
            return 204;
        }

        # Handle errors
        proxy_intercept_errors on;
        error_page 401 403 404 =200 @error_handler;
    }

    location @error_handler {
        add_header Access-Control-Allow-Origin "https://frame.leamech.com" always;
        add_header Access-Control-Allow-Credentials "true" always;
        return 401;
    }

    # Logs
    access_log /var/log/nginx/frame.leamech.com.access.log;
    error_log /var/log/nginx/frame.leamech.com.error.log;

    listen [::]:443 ssl ipv6only=on; # managed by Certbot
    listen 443 ssl; # managed by Certbot
    ssl_certificate /etc/letsencrypt/live/frame.leamech.com/fullchain.pem; # managed by Certbot
    ssl_certificate_key /etc/letsencrypt/live/frame.leamech.com/privkey.pem; # managed by Certbot
    include /etc/letsencrypt/options-ssl-nginx.conf; # managed by Certbot
    ssl_dhparam /etc/letsencrypt/ssl-dhparams.pem; # managed by Certbot
}

server {
    if ($host = frame.leamech.com) {
        return 301 https://$host$request_uri;
    } # managed by Certbot

    listen 80;
    listen [::]:80;
    server_name frame.leamech.com;
    return 404; # managed by Certbot
} 